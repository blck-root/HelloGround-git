"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var aws4_1 = require("aws4");
var combineURLs_1 = __importDefault(require("axios/lib/helpers/combineURLs"));
var isAbsoluteURL_1 = __importDefault(require("axios/lib/helpers/isAbsoluteURL"));
var url_1 = require("url");
/**
 * Create an interceptor to add to the Axios request chain. This interceptor
 * will sign requests with the AWSv4 signature.
 *
 * @example
 * axios.interceptors.request.use(
 *     aws4Interceptor({ region: "eu-west-2", service: "execute-api" })
 * );
 *
 * @param options The options to be used when signing a request
 */
exports.aws4Interceptor = function (options, credentials) { return function (config) {
    if (!config.url) {
        throw new Error("No URL present in request config, unable to sign request");
    }
    var url = config.url;
    if (config.baseURL && !isAbsoluteURL_1.default(config.url)) {
        url = combineURLs_1.default(config.baseURL, config.url);
    }
    var _a = new url_1.URL(url), host = _a.host, pathname = _a.pathname, search = _a.search;
    var data = config.data, headers = config.headers, method = config.method;
    var region;
    var service;
    var signQuery;
    if (options) {
        (region = options.region, service = options.service);
    }
    var transformRequest = getTransformer(config);
    var transformedData = transformRequest(data, headers);
    // Remove all the default Axios headers
    var common = headers.common, _delete = headers.delete, // 'delete' is a reserved word
    get = headers.get, head = headers.head, post = headers.post, put = headers.put, patch = headers.patch, headersToSign = __rest(headers, ["common", "delete", "get", "head", "post", "put", "patch"]);
    var signingOptions = __assign(__assign({ method: method && method.toUpperCase(), host: host, path: pathname + search, region: region,
        service: service }, (signQuery !== undefined ? { signQuery: signQuery } : {})), { body: transformedData, headers: headersToSign });
    aws4_1.sign(signingOptions, credentials);
    config.headers = signingOptions.headers;
    return config;
}; };
var getTransformer = function (config) {
    var transformRequest = config.transformRequest;
    if (transformRequest) {
        if (typeof transformRequest === "function") {
            return transformRequest;
        }
        else if (transformRequest.length) {
            return transformRequest[0];
        }
    }
    throw new Error("Could not get default transformRequest function from Axios defaults");
};
