"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var aws4_1 = require("aws4");
var axios_1 = __importDefault(require("axios"));
var _1 = require(".");
jest.mock("aws4");
describe("interceptor", function () {
    var getDefaultHeaders = function () { return ({
        common: { Accept: "application/json, text/plain, */*" },
        delete: {},
        get: {},
        head: {},
        post: { "Content-Type": "application/x-www-form-urlencoded" },
        put: { "Content-Type": "application/x-www-form-urlencoded" },
        patch: { "Content-Type": "application/x-www-form-urlencoded" }
    }); };
    var getDefaultTransformRequest = function () { return axios_1.default.defaults.transformRequest; };
    beforeEach(function () {
        aws4_1.sign.mockReset();
    });
    it("signs GET requests", function () {
        // Arrange
        var request = {
            method: "GET",
            url: "https://example.com/foobar",
            headers: getDefaultHeaders(),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            path: "/foobar",
            method: "GET",
            region: "local",
            host: "example.com",
            headers: {}
        }, undefined);
    });
    it("signs query paremeters in GET requests", function () {
        // Arrange
        var request = {
            method: "GET",
            url: "https://example.com/foobar?foo=bar",
            headers: getDefaultHeaders(),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            path: "/foobar?foo=bar",
            method: "GET",
            region: "local",
            host: "example.com",
            headers: {}
        }, undefined);
    });
    it("signs POST requests with an object payload", function () {
        // Arrange
        var data = { foo: "bar" };
        var request = {
            method: "POST",
            url: "https://example.com/foobar",
            data: data,
            headers: getDefaultHeaders(),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            path: "/foobar",
            method: "POST",
            region: "local",
            host: "example.com",
            body: '{"foo":"bar"}',
            headers: { "Content-Type": "application/json;charset=utf-8" }
        }, undefined);
    });
    it("signs POST requests with a string payload", function () {
        // Arrange
        var data = "foobar";
        var request = {
            method: "POST",
            url: "https://example.com/foobar",
            data: data,
            headers: getDefaultHeaders(),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            method: "POST",
            path: "/foobar",
            region: "local",
            host: "example.com",
            body: "foobar",
            headers: {}
        }, undefined);
    });
    it("passes Content-Type header to be signed", function () {
        // Arrange
        var data = "foobar";
        var request = {
            method: "POST",
            url: "https://example.com/foobar",
            data: data,
            headers: __assign(__assign({}, getDefaultHeaders()), { "Content-Type": "application/xml" }),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            method: "POST",
            path: "/foobar",
            region: "local",
            host: "example.com",
            body: "foobar",
            headers: { "Content-Type": "application/xml" }
        }, undefined);
    });
    it("works with baseURL config", function () {
        // Arrange
        var data = "foobar";
        var request = {
            method: "POST",
            baseURL: "https://example.com/foo",
            url: "bar",
            data: data,
            headers: __assign(__assign({}, getDefaultHeaders()), { "Content-Type": "application/xml" }),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            method: "POST",
            path: "/foo/bar",
            region: "local",
            host: "example.com",
            body: "foobar",
            headers: { "Content-Type": "application/xml" }
        }, undefined);
    });
    it("passes the credentials", function () {
        // Arrange
        var request = {
            method: "GET",
            url: "https://example.com/foobar",
            headers: getDefaultHeaders(),
            transformRequest: getDefaultTransformRequest()
        };
        var interceptor = _1.aws4Interceptor({
            region: "local",
            service: "execute-api"
        }, {
            accessKeyId: 'access-key-id',
            secretAccessKey: 'secret-access-key',
            sessionToken: 'session-token'
        });
        // Act
        interceptor(request);
        // Assert
        expect(aws4_1.sign).toBeCalledWith({
            service: "execute-api",
            path: "/foobar",
            method: "GET",
            region: "local",
            host: "example.com",
            headers: {}
        }, {
            accessKeyId: 'access-key-id',
            secretAccessKey: 'secret-access-key',
            sessionToken: 'session-token'
        });
    });
});
